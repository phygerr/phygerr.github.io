<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - 标签 - Phyger's Blog</title><link>/tags/python/</link><description>Python - 标签 - Phyger's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>463551098@qq.com (Phyger)</managingEditor><webMaster>463551098@qq.com (Phyger)</webMaster><lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/" rel="self" type="application/rss+xml"/><item><title>Python的@property是干嘛的？</title><link>/python%E7%9A%84property%E6%98%AF%E5%B9%B2%E5%98%9B%E7%9A%84/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/python%E7%9A%84property%E6%98%AF%E5%B9%B2%E5%98%9B%E7%9A%84/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>通常，当我们需要对对象的敏感属性或者不希望外部直接访问的属性进行私有化，但是某些时候我们又需要对这些私有属性进行修改，该怎么处理呢？ 1、几个</description></item><item><title>Python的闭包是什么？</title><link>/%E9%97%AD%E5%8C%85%E6%98%AF%E4%BB%80%E4%B9%88/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E9%97%AD%E5%8C%85%E6%98%AF%E4%BB%80%E4%B9%88/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是闭包 Python中的闭包是一个比较模糊的概念，有很多朋友都认为不好理解，但是随着深入学习，就会发现闭包无论如何都是需要去理解的，下面我</description></item><item><title>Python的魔法方法一览表</title><link>/%E5%B9%B2%E8%B4%A7python%E7%9A%84%E9%AD%94%E6%95%B0%E6%96%B9%E6%B3%95%E4%B8%80%E8%A7%88%E8%A1%A8/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E5%B9%B2%E8%B4%A7python%E7%9A%84%E9%AD%94%E6%95%B0%E6%96%B9%E6%B3%95%E4%B8%80%E8%A7%88%E8%A1%A8/</guid><description><![CDATA[<div class="featured-image">
                <img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
            </div>基本的魔法方法 名称 解释 _new_(cls[, &hellip;]) 在一个对象实例化的时候所调用的第一个方法 _init_(self[, &hellip;]) 构造器，当一个实例被创建的时候调用的初始化方法 _del_(self) 析构器，当一个实例被销]]></description></item><item><title>Python装饰器进阶（类装饰器+带参数的装饰器+多装饰器）</title><link>/%E9%80%8F%E5%BD%BBpython%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E9%98%B6%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8-%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8-%E5%A4%9A%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E9%80%8F%E5%BD%BBpython%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E9%98%B6%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8-%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8-%E5%A4%9A%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>接【简明】彻底搞清楚Python的装饰器，我们继续介绍类装饰器+带参数的装饰+多装饰器，顾名思义类装饰器就是类闭包。 定义一个类装饰器 需求：实</description></item><item><title>Token的生成和校验</title><link>/%E5%A2%99%E8%A3%82%E6%8E%A8%E8%8D%90token%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E5%A2%99%E8%A3%82%E6%8E%A8%E8%8D%90token%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是 token token（也称令牌）就是一串字符，其作用是为了减轻频繁进行用户名和密码的验证而对服务器产生的压力。客户端首次访问通过正确的用户名和</description></item><item><title>Token的获取和使用-FastApi版</title><link>/%E5%85%A8%E6%98%AF%E7%B2%BE%E5%8D%8Etoken%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BD%BF%E7%94%A8-fastapi%E7%89%88/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E5%85%A8%E6%98%AF%E7%B2%BE%E5%8D%8Etoken%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BD%BF%E7%94%A8-fastapi%E7%89%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
            </div>前言 通常，我们的接口都是需要认证后才能可以访问的，前面我们介绍了 token 的生成和校验，那在 FastApi 中怎么设计需要认证的接口呢？ 定义令牌对象 1 oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&#34;/token/&#34;) 以上/]]></description></item><item><title>彻底搞清楚Python的装饰器</title><link>/%E7%AE%80%E6%98%8E%E5%BD%BB%E5%BA%95%E6%90%9E%E6%B8%85%E6%A5%9Apython%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E7%AE%80%E6%98%8E%E5%BD%BB%E5%BA%95%E6%90%9E%E6%B8%85%E6%A5%9Apython%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是装饰器 接“闭包”是什么？，我们可以认为装饰器就是一个闭包函数，同时它也返回了一个函数。 你也可以认为装饰器就是将函数作为参数传递到方法中</description></item><item><title>FastApi-10-Docs的Example Value</title><link>/fastapi-10-docs%E7%9A%84example-value-%E5%89%AF%E6%9C%AC/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-10-docs%E7%9A%84example-value-%E5%89%AF%E6%9C%AC/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是 Example 你可能注意到了，之前的 docs 中在 response 中的 Example Value 中是没有实例的，这个怎么做呢？ 答案是使用 Filed 对象，也可以在模型中使用 schema_extra。 Requests</description></item><item><title>FastApi-09-模型嵌套</title><link>/fastapi-09-%E6%A8%A1%E5%9E%8B%E5%B5%8C%E5%A5%97/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-09-%E6%A8%A1%E5%9E%8B%E5%B5%8C%E5%A5%97/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>常用基础嵌套 使用 FastAPI，你可以定义、校验、记录文档并使用任意深度嵌套的模型（归功于 Pydantic）。 基础模型 1 2 3 4 5 6 class Item(BaseModel): name: str description:</description></item><item><title>FastApi-08-路径参数校验</title><link>/fastapi-08-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</link><pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-08-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>背景 和查询参数一样，路径参数也需要进行限定。 Path 通常，我们会直接使用 name:str='phyger'的方式来限定路径参数的类型和默认值，但是</description></item></channel></rss>