<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>FastApi简明教程 - 分类 - Phyger's Blog</title><link>/categories/fastapi%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link><description>FastApi简明教程 - 分类 - Phyger's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>463551098@qq.com (Phyger)</managingEditor><webMaster>463551098@qq.com (Phyger)</webMaster><lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/fastapi%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/" rel="self" type="application/rss+xml"/><item><title>Token的生成和校验</title><link>/%E5%A2%99%E8%A3%82%E6%8E%A8%E8%8D%90token%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E5%A2%99%E8%A3%82%E6%8E%A8%E8%8D%90token%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是 token token（也称令牌）就是一串字符，其作用是为了减轻频繁进行用户名和密码的验证而对服务器产生的压力。客户端首次访问通过正确的用户名和</description></item><item><title>Token的获取和使用-FastApi版</title><link>/%E5%85%A8%E6%98%AF%E7%B2%BE%E5%8D%8Etoken%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BD%BF%E7%94%A8-fastapi%E7%89%88/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/%E5%85%A8%E6%98%AF%E7%B2%BE%E5%8D%8Etoken%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BD%BF%E7%94%A8-fastapi%E7%89%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
            </div>前言 通常，我们的接口都是需要认证后才能可以访问的，前面我们介绍了 token 的生成和校验，那在 FastApi 中怎么设计需要认证的接口呢？ 定义令牌对象 1 oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&#34;/token/&#34;) 以上/]]></description></item><item><title>FastApi-10-Docs的Example Value</title><link>/fastapi-10-docs%E7%9A%84example-value/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-10-docs%E7%9A%84example-value/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是 Example 你可能注意到了，之前的 docs 中在 response 中的 Example Value 中是没有实例的，这个怎么做呢？ 答案是使用 Filed 对象，也可以在模型中使用 schema_extra。 Requests</description></item><item><title>FastApi-11-模板渲染</title><link>/fastapi-11-%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-11-%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>什么是模板 简单理解，模板就是 web 后端向前端发送的 html 模型。 在前面的学习中，我们已经知道了关于 FastApi 的请求和参数的使用方法。但是我们在实际的 web 开发中，</description></item><item><title>FastApi-09-模型嵌套</title><link>/fastapi-09-%E6%A8%A1%E5%9E%8B%E5%B5%8C%E5%A5%97/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-09-%E6%A8%A1%E5%9E%8B%E5%B5%8C%E5%A5%97/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>常用基础嵌套 使用 FastAPI，你可以定义、校验、记录文档并使用任意深度嵌套的模型（归功于 Pydantic）。 基础模型 1 2 3 4 5 6 class Item(BaseModel): name: str description:</description></item><item><title>FastApi-08-路径参数校验</title><link>/fastapi-08-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</link><pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-08-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>背景 和查询参数一样，路径参数也需要进行限定。 Path 通常，我们会直接使用 name:str='phyger'的方式来限定路径参数的类型和默认值，但是</description></item><item><title>FastApi-07-查询参数校验</title><link>/fastapi-07-%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-07-%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>问题抛出 前面我们已经了解了查询参数，但是实际开发中我们可能需要限定参数的类型，长度等其他属性。这个时候我们就需要对查询参数进行校验。 类型我们</description></item><item><title>FastApi-06-请求体-3</title><link>/fastapi-06-%E8%AF%B7%E6%B1%82%E4%BD%93-2/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-06-%E8%AF%B7%E6%B1%82%E4%BD%93-2/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>动态请求体 诉求：当我们想要动态的向请求体中增加一个字段，但是不想修改原有的请求体数据模型，怎么办呢？ 答案是：使用动态请求体 Body 实例 原有数据模型</description></item><item><title>FastApi-05-请求体-2</title><link>/fastapi-05-%E8%AF%B7%E6%B1%82%E4%BD%93-2/</link><pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-05-%E8%AF%B7%E6%B1%82%E4%BD%93-2/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>请求体+路径参数 实际开发中，我们经常会遇到请求体和路径参数同时存在的场景。 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from pydantic import BaseModel class Mds(BaseModel): name: str age: int = 18 home: str</description></item><item><title>FastApi-04-请求体-1</title><link>/fastapi-04-%E8%AF%B7%E6%B1%82%E4%BD%93-1/</link><pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/fastapi-04-%E8%AF%B7%E6%B1%82%E4%BD%93-1/</guid><description>&lt;div class="featured-image">
&lt;img src="/https:/gitee.com/phygerr/picture/raw/master/ybs.jpg" referrerpolicy="no-referrer">
&lt;/div>何为请求体 顾名思义，请求体就是在请求过程中客户端携带的数据。 请求体不是一定要携带的，而且请求体不建议用 GET 请求发送，通常我们会使用 POST 请求发送请</description></item></channel></rss>